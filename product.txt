# 社区垃圾分类系统产品说明文档

## 1. 架构设计

### 1.1 技术架构
采用B/S架构，基于Spring Boot的MVC分层设计：
```
┌─────────────────────────────────────────────────┐
│                   浏览器端                      │
│  (JSP页面 + jQuery + Bootstrap)                │
└──────────────────────┬─────────────────────────┘
                       │ HTTP请求/响应
┌──────────────────────▼─────────────────────────┐
│                  Controller层                  │
│  (RESTful API接口，参数校验，权限控制)         │
└──────────────────────┬─────────────────────────┘
                       │ 服务调用
┌──────────────────────▼─────────────────────────┐
│                   Service层                    │
│  (业务逻辑处理，事务管理)                      │
└──────────────────────┬─────────────────────────┘
                       │ 数据访问
┌──────────────────────▼─────────────────────────┐
│                   Mapper层                     │
│  (MyBatis数据库操作)                           │
└──────────────────────┬─────────────────────────┘
                       │ SQL执行
┌──────────────────────▼─────────────────────────┐
│                  MySQL数据库                   │
│  (存储业务数据)                                │
└─────────────────────────────────────────────────┘
```

### 1.2 模块设计
系统主要功能模块：
- 用户管理模块
- 垃圾分类模块
- 投放记录模块
- 公告管理模块
- 活动管理模块
- FAQ管理模块
- 数据统计模块

### 1.3 数据库设计
#### 概念设计（ER图）
```
┌───────────┐       ┌──────────────────┐       ┌───────────────┐
│   User    │       │ DisposalRecord   │       │ WasteCategory │
├───────────┤       ├──────────────────┤       ├───────────────┤
│ PK id     │◄──────┤ FK user_id       │──────►│ PK id         │
│ username  │       │ FK category_id   │       │ name          │
│ password  │       │ disposal_time    │       │ description   │
│ ...       │       │ create_time      │       │ ...           │
└───────────┘       └──────────────────┘       └───────────────┘
      ▲                      ▲
      │                      │
      │                ┌─────┴─────┐
      │                │ Activity  │
      │                ├───────────┤
      │                │ PK id     │
      │                │ title     │
      │                │ ...       │
      │                └───────────┘
      │
┌─────┴─────┐
│ Announce  │
├───────────┤
│ PK id     │
│ title     │
│ ...       │
└───────────┘
```

#### 逻辑设计
详见schema.sql文件，包含6个主要表：
1. user - 用户表
2. waste_category - 垃圾分类表
3. disposal_record - 投放记录表
4. announcement - 公告表
5. activity - 活动表
6. faq - 常见问题表

### 1.4 接口设计
#### API规范
- 采用RESTful风格设计
- 统一响应格式：
```json
{
  "code": 200,
  "message": "成功",
  "data": {...}
}
```

#### 用户模块接口示例：
- POST /api/user/register - 用户注册
- POST /api/user/login/username - 用户名登录
- GET /api/user/current - 获取当前用户
- GET /api/user/list - 获取用户列表(管理员)
- PUT /api/user/update - 更新用户(管理员)
- DELETE /api/user/delete/{id} - 删除用户(管理员)

## 2. 系统实现

### 2.1 技术选型
- 开发工具: IntelliJ IDEA
- 编程语言: Java 8
- 框架: 
  - Spring Boot 2.7.10
  - MyBatis 2.3.0
- 数据库: MySQL 8.0 + H2(测试)
- 前端: JSP + Bootstrap + jQuery
- 其他: Apache POI(Excel导出)

### 2.2 关键技术实现
#### 权限控制
通过Session管理用户登录状态，在Controller中进行权限校验：
```java
User currentUser = (User) session.getAttribute("user");
if (currentUser == null || currentUser.getRole() < 1) {
    return Result.error("无权限");
}
```

#### 数据统计
使用MyBatis进行复杂查询，生成垃圾分类统计数据，支持Excel导出。

### 2.3 开发难点与解决方案
1. 并发问题：使用数据库事务保证数据一致性
2. 性能优化：添加SQL监控拦截器，记录慢查询
3. 安全性：密码MD5加密存储，接口权限控制
